{"data":{"site":{"siteMetadata":{"title":"Machine Learning Blog - JvdW","author":"Jos van de Wolfshaar"}},"markdownRemark":{"id":"82e1e556-6bc1-5bf8-9963-41cd9b94e491","excerpt":"IntroductionRecently I’ve spent some time on CUDA programming and implementing custom Ops for TensorFlow. As an exercise, I decided to take a shot at…","html":"<h2>Introduction</h2>\n<p>Recently I’ve spent some time on CUDA programming and implementing custom Ops for TensorFlow. As an exercise, I decided to take a shot at implementing a custom Op for one of the operations in capsule networks that would normally require some reshape hacking or at least a couple of intermediate TensorFlow Ops. If you’re not familiar with Capsule Networks, have a look at the article or my previous post. The open-sourced capsule network code by the original authors can be found here. The code that we discuss in this blog post can be found here.</p>\n<p>Many of the concepts that are covered in this post (CUDA, TensorFlow custom Ops, gradient testing) can be learned by going through their corresponding documentations, but I always think it is enlightening to see how such separate elements come together. This is the main motivation behind my blog post: showcasing the development of a custom TensorFlow Op with CUDA from start to end. So let’s commence.</p>\n<p><strong>There also exists a Chinese translation of this post by Jakukyo Friel.</strong></p>\n<h2>Capsule prediction</h2>\n<p>The operation of interest in this blog post is the one that computes:</p>\n<p> and for all samples in a batch. Hence, the tensors W<em>ij and u</em>i are actually of shape [batch<em>size, in</em>caps, in_dim] and [in<em>caps, out</em>caps, out<em>dim, in</em>dim] respectively. This means that we will build an op that just takes in these two tensors and computes an output tensor u<em>hat</em>ji of shape [batch<em>size, in</em>caps, out<em>caps, out</em>dim]. In other words, for all batch indices [0,1,…,batch_size-1] and for all combinations of in capsules [0,1,…,in_caps-1] and out capsules [0,1,…,out_caps-1] we have to compute a matrix-vector product.</p>\n<h2>TensorFlow kernel implementation</h2>\n<p>Our custom Op will be most valuable if we implement it for a GPU. In the TensorFlow documentation, you can find the necessary material to get you started on your own C++ kernels for TensorFlow. Then, you can read up on how to empower your algorithms with massively parallel GPU capabilities in this book or online. I will not repeat the details that you can find there, but I will provide a practical example that hopefully helps to understand how you can use CUDA for your own TensorFlow Ops. For me, getting to know some CUDA was easier than I thought, but squeezing out all performance can be tricky and I will leave further optimization of the kernel in this post for future work.</p>\n<h4>Op registration</h4>\n<p>Let’s do the forward pass of the Op. First, we will register the Op:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">REGISTER_OP<span class=\"token punctuation\">(</span><span class=\"token string\">\"CapsulePrediction\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span>Input<span class=\"token punctuation\">(</span><span class=\"token string\">\"input: T\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span>Input<span class=\"token punctuation\">(</span><span class=\"token string\">\"weights: T\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span>Output<span class=\"token punctuation\">(</span><span class=\"token string\">\"output: T\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span>Attr<span class=\"token punctuation\">(</span><span class=\"token string\">\"T: type\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span>SetShapeFn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>InferenceContext<span class=\"token operator\">*</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">//</span> Get shapes <span class=\"token keyword\">and</span> ensure correct dimensionality\n    ShapeHandle in_shape<span class=\"token punctuation\">;</span>\n    ShapeHandle weights_shape<span class=\"token punctuation\">;</span>\n    TF_RETURN_IF_ERROR<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>WithRank<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>in_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    TF_RETURN_IF_ERROR<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>WithRank<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>weights_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">//</span> Construct <span class=\"token keyword\">and</span> <span class=\"token builtin\">set</span> the output shape\n    DimensionHandle out_d0<span class=\"token punctuation\">,</span> out_d1<span class=\"token punctuation\">,</span> out_d2<span class=\"token punctuation\">,</span> out_d3<span class=\"token punctuation\">;</span>\n    std<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>vector<span class=\"token operator\">&lt;</span>DimensionHandle<span class=\"token operator\">></span> out_dims<span class=\"token punctuation\">;</span>\n    out_dims<span class=\"token punctuation\">.</span>push_back<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>MakeDim<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>Dim<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    out_dims<span class=\"token punctuation\">.</span>push_back<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>MakeDim<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>Dim<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    out_dims<span class=\"token punctuation\">.</span>push_back<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>MakeDim<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>Dim<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    out_dims<span class=\"token punctuation\">.</span>push_back<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>MakeDim<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>Dim<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ShapeHandle out_shape <span class=\"token operator\">=</span> ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>MakeShape<span class=\"token punctuation\">(</span>out_dims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>set_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> out_shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> Status<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>OK<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For now, I have defined this so that we could later specify different TensorFlow kernels for different dtypes by adding the “..: T” specification. Some of the classes that you see here such as ShapeHandle, DimensionHandle and InferenceContext are defined in the tensorflow namespace. The code shows a shape function that is implemented as a lambda function which first ensures ctx->input(0) (the input) and <code class=\"language-text\">ctx-&gt;input(1)</code> (the weights ) have the correct rank. Then, we determine the dimensions of the output tensor which we can obtain from the input tensors. The dimension of the Op’s output is [batch<em>size, in</em>caps, out<em>caps, out</em>dim], so we take batch<em>size and in</em>caps from the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">u_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> tensor and out<em>caps and out</em>dim from the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">W_{ij}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> tensor.\nForward capsule prediction\nNow, let’s look at the Op’s kernel. The word ‘kernel’ is TensorFlow terminology for the device-specific implementation of an Op. When defining a custom kernel, it should inherit from TensorFlow’s OpKernel and it shall implement the Compute method:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CapsulePredictionOp</span> <span class=\"token punctuation\">:</span> public OpKernel\n<span class=\"token punctuation\">{</span>\n public<span class=\"token punctuation\">:</span>\n  explicit CapsulePredictionOp<span class=\"token punctuation\">(</span>OpKernelConstruction<span class=\"token operator\">*</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> OpKernel<span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  void Compute<span class=\"token punctuation\">(</span>OpKernelContext<span class=\"token operator\">*</span> ctx<span class=\"token punctuation\">)</span> override\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">//</span> Get inputs\n    const Tensor<span class=\"token operator\">&amp;</span> <span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    const Tensor<span class=\"token operator\">&amp;</span> weights <span class=\"token operator\">=</span> ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">//</span> Setup output shape\n    const TensorShape<span class=\"token operator\">&amp;</span> input_shape<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    TensorShape output_shape<span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    output_shape<span class=\"token punctuation\">.</span>InsertDim<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> input_shape<span class=\"token punctuation\">.</span>dim_size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    output_shape<span class=\"token punctuation\">.</span>RemoveDim<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">//</span> Allocate output tensor\n    Tensor<span class=\"token operator\">*</span> output <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span>\n    OP_REQUIRES_OK<span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>allocate_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> output_shape<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">//</span> Get the Eigen tensors <span class=\"token keyword\">and</span> <span class=\"token keyword\">pass</span> them on the launcher\n    auto input_tensor   <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">.</span>tensor<span class=\"token operator\">&lt;</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    auto weights_tensor <span class=\"token operator\">=</span> weights<span class=\"token punctuation\">.</span>tensor<span class=\"token operator\">&lt;</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    auto output_tensor  <span class=\"token operator\">=</span> output<span class=\"token operator\">-</span><span class=\"token operator\">></span>tensor<span class=\"token operator\">&lt;</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    launchCapsulePrediction<span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">-</span><span class=\"token operator\">></span>eigen_device<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> input_tensor<span class=\"token punctuation\">,</span> weights_tensor<span class=\"token punctuation\">,</span>\n      output_tensor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the implementation above we haven’t done anything with CUDA yet, but we’ll get there so don’t worry. The code merely initializes the output shape from the input shapes and allocates the memory. The OpKernelContext object that is provided as a parameter makes sure to allocate the memory on the currently used device. In our case, this will be the GPU. Then, we obtain the Eigen tensors through the tensor method and pass them on to our launchCapsulePrediction function, where the actual magic happens.\nLaunching the kernel\nOur launchCapsulePrediction function literally (at least in CUDA terminology) launches code on the GPU. Perhaps a little confusing, but CUDA refers to functions that run code on the ‘device’ as kernels. In TensorFlow terminology, a kernel is not necessarily a GPU implementation, while in CUDA terminology it is. Let’s not get too wrapped up in terminology and just get to the code:</p>\n<p>void launchCapsulePrediction(\nconst GPUDevice&#x26; d,\ntypename TTypes&#x3C;float, 3>::ConstTensor x,\ntypename TTypes&#x3C;float, 4>::ConstTensor weights,\ntypename TTypes&#x3C;float, 4>::Tensor out)\n{\n// Get the dimensions\nconst int64 batch<em>size  = x.dimension(0);\nconst int64 in</em>caps     = x.dimension(1);\nconst int64 in<em>dim      = x.dimension(2);\nconst int64 out</em>dim     = weights.dimension(2);\nconst int64 out_caps    = weights.dimension(1);</p>\n<p>  // Size first dim\nconst int64 w<em>d0 = out</em>caps * out<em>dim * in</em>dim;\nconst int64 x<em>d0 = in</em>caps * in<em>dim;\nconst int64 o</em>d0 = in<em>caps * out</em>caps * out_dim;</p>\n<p>  // Second dim\nconst int64 w<em>d1 = out</em>dim * in<em>dim;\nconst int64 x</em>d1 = in<em>dim;\nconst int64 o</em>d1 = out<em>caps * out</em>dim;</p>\n<p>  // Third dim\nconst int64 w<em>d2 = in</em>dim;\nconst int64 o<em>d2 = out</em>dim;</p>\n<p>  // Launch CUDA kernel for forward operation\nCudaLaunchConfig config = GetCudaLaunchConfig(out.size(), d);\ncapsulePredictionKernel\n&#x3C;&#x3C;&#x3C;config.block<em>count, config.thread</em>per<em>block, 0, d.stream()>>>(\nx.data(), weights.data(), out.data(),\no</em>d0, o<em>d1, o</em>d2, x<em>d0, x</em>d1, w<em>d0, w</em>d1, w<em>d2,\nin</em>dim, out.size());\n}\n<br>\nThe TTypes templates that you can see in the function arguments and the int64 types are defined in the tensorflow namespace. The next part about the dimensions should be pretty self-explanatory. Because we are passing our tensor data as one-dimensional arrays to the actual CUDA kernel, we need to figure out what the memory sizes are for each dimension and each kernel. Note that when I say ‘memory sizes’, I just refer to the number of floats for each axis and not the byte size. Let’s consider the memory sizes of the first axis of each tensor:</p>\n<p>// Size first dim\nconst int64 w<em>d0 = out</em>caps * out<em>dim * in</em>dim;\nconst int64 x<em>d0 = in</em>caps * in<em>dim;\nconst int64 o</em>d0 = in<em>caps * out</em>caps * out<em>dim;\n<br>\nAwesome, so we can simply get these using the dimensions we determined already. The code tells us that w</em>d0 is just the product of out<em>caps, out</em>dim and in<em>dim. So if we want to jump from one index\nW\ni\n,\nj\n,\nk\n,\nl\nto\nW\ni\n+\n1\n,\nj\n,\nk\n,\nl\nwe should add w</em>d0 to the one-dimensional index. The same goes for index\nj\nand w_d1 as you might already expect.</p>\n<p>The actual CUDA kernel launch is given at the bottom of the function and repeated here:</p>\n<p>// Launch CUDA kernel for forward operation\nCudaLaunchConfig config = GetCudaLaunchConfig(out.size(), d);\ncapsulePredictionKernel\n&#x3C;&#x3C;&#x3C;config.block<em>count, config.thread</em>per<em>block, 0, d.stream()>>>(\nx.data(), weights.data(), out.data(),\no</em>d0, o<em>d1, o</em>d2, x<em>d0, x</em>d1, w<em>d0, w</em>d1, w<em>d2,\nin</em>dim, out.size());\n<br>\nBoth statements involve quite a few new concepts. The first statement uses a GetCudaLaunchConfig instance as a way to determine the number of blocks and the number of threads per block. It is provided in the TensorFlow header tensorflow/core/util/cuda<em>kernel</em>helper.h. You should definitely check out that file in case you are working on your own Op! The capsulePredictionKernel is the function that uses CUDA parallelism on the GPU. It is launched by using the triple-fold delimiters: &#x3C;&#x3C;&#x3C;config.block<em>count, config.thread</em>per_block, 0, d.stream()>>>. When you launch a kernel, you must specify the number of blocks and threads per block, as is done here. The zero on the third position is not relevant for now and it should most likely be zero if you were to implement your own kernels. The CUDA stream d.stream() can be thought of as a pipeline of GPU instructions. Whenever you add your kernel to the stream, the stream will make sure the kernel ends before the next kernel on the stream is called. If you want to do two independent tasks in parallel, you could use two streams and launch one task on each.</p>\n<p>Threads and blocks\nAll blocks that are assigned to a call can be run in parallel. If you launch a kernel with N blocks, then you could think of it as running N separate instances of the kernel function. That’s pretty convenient! The nvcc compiler will make sure that the kernel function has access to the exact block index so that the specific block-instance of the kernel knows which parts of the incoming arrays it should process.</p>\n<p>A block can contain multiple threads itself. Threads are just an additional layer of parallelism, so they run in parallel. Why another layer of parallelism, you ask? Well, threads can do things that blocks cannot. Threads can share their memory which is typically useful when you want to use the same value of some input array in the same block multiple times. The shared memory access is much faster and it is one of the many ways you can optimize your final CUDA implementation. Here is a schematic illustration of the two parallel layers:</p>\n<p>Blocks and threads\nThe CUDA kernel\nAfter a quick recap on threads and blocks in CUDA, we finally get to see the CUDA implementation of the forward capsule prediction:</p>\n<p><strong>global</strong> void capsulePredictionKernel(\nconst float* in, const float* weights, float* out,\nconst int64 o<em>d0, const int64 o</em>d1, const int64 o<em>d2,\nconst int64 x</em>d0, const int64 x<em>d1,\nconst int64 w</em>d0, const int64 w<em>d1, const int64 w</em>d2,\nconst int64 in<em>dim, const int64 output</em>size)\n{\nCUDA<em>1D</em>KERNEL<em>LOOP(i, output</em>size)\n{\n// So here we have out[b,ci,cj,e]\nconst int64 b     = i / o<em>d0;\nconst int64 ci    = (i % o</em>d0) / o<em>d1;\nconst int64 cj    = (i % o</em>d1) / o<em>d2;\nconst int64 e</em>out  = i % o_d2;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Then, we can have a look at computing the array indices for in and W\nint64 in_idx = b * x_d0 + ci * x_d1;\nint64 w_idx = ci * w_d0 + cj * w_d1 + e_out * w_d2;\n\n// Initialize result\nfloat result = 0.0;\nfor (int64 v = 0; v &lt; in_dim; ++v)\n  // For both in and weights, the subsequent elements of the forward\n  // computation are also subsequent in memory\n  result += ldg(in + in_idx++) * ldg(weights + w_idx++);\n// Write result\nout[i] = result;</code></pre></div>\n<p>  }\n}\n<br>\nThe first thing you might notice is the <strong>global</strong> qualifier that precedes the function definition. This is what the nvcc compiler uses to make the function available globally, meaning that it can be launched from CPU, or ‘host’ code in CUDA terminology. The function’s arguments inherit their names from the launchCapsulePrediction function so they should not cause too much confusion. The CUDA<em>1D</em>KERNEL<em>LOOP is a macro defined in tensorflow/core/util/cuda</em>kernel_helper.h. It replaces this line of code with:</p>\n<p>for (int i = blockIdx.x * blockDim.x + threadIdx.x; i &#x3C; output<em>size;\ni += blockDim.x * gridDim.x)\n<br>\nThe CUDA kernel launch together with this TensorFlow macro forces us to think in an abstract yet convenient way: it gives us some index i that correspond to the i-th element of the output array out. Different block/thread instantiations of this kernel will get their own values for i. Now all we have to do is figure out what the indices are of our additional arrays in and weights. In order to do that, we determine the batch index b, the input capsule index ci, the output capsule index cj and the out capsule element index e</em>out:</p>\n<p>// So here we have out[b,ci,cj,e]\nconst int64 b     = i / o<em>d0;\nconst int64 ci    = (i % o</em>d0) / o<em>d1;\nconst int64 cj    = (i % o</em>d1) / o<em>d2;\nconst int64 e</em>out = i % o<em>d2;\n<br>\nDetermining these becomes easy once we know the number of elements contained in each axis. In fact, we have given the memory sizes as arguments to the function. For the other arrays, we can then convert b, ci, cj and e</em>out to their respective one-dimensional indices:</p>\n<p>// Then, we can have a look at computing the array indices for in and W\nint64 in<em>idx = b * x</em>d0 + ci * x<em>d1;\nint64 w</em>idx  = ci * w<em>d0 + cj * w</em>d1 + e<em>out * w</em>d2;\n<br>\nAgain, we use the already provided memory sizes for each of the axes to get our one-dimensional indices. These are the indices for the first input capsule element of (i) input capsule ci at batch index b and (ii) the weights of the input capsule ci, the output capsule cj and the output capsule element e_out. If you’re familiar with Matlab, then perhaps it helps to remind you of the sub2ind function that concerns the very same thing.</p>\n<p>We assume that the last axis of both in and W corresponds to the input capsule elements. This means that they are subsequent in memory and it is therefore straightforward to construct the loop that goes over the individual input capsule elements:</p>\n<p>// Initialize result\nfloat result = 0.0;\nfor (int64 v = 0; v &#x3C; in<em>dim; ++v)\n// For both in and weights, the subsequent elements of the forward\n// computation are also subsequent in memory\nresult += ldg(in + in</em>idx++) * ldg(weights + w_idx++);\n// Write result\nout[i] = result;\n<br>\nThe ldg function is a Read-Only Data Cache Load Function. It just receives a pointer to the actual element to read. Remember that we are computing matrix-vector products, which are just sets of inner products. A potential improvement here is to use shared memory since a single input capsule value is used many times, but we will leave out further optimization for now.</p>\n<p>Testing\nI want this post to be an end-to-end showcase of the development of a TensorFlow custom Op for GPU. This includes testing the Op. Here’s the forward computation with numpy:</p>\n<p>import tensorflow as tf\nfrom ops.capsuleprediction import capsule_prediction\nimport numpy as np\nfrom parameterized import parameterized\nimport itertools</p>\n<p>class CapsulePredictionOpTest(tf.test.TestCase):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@staticmethod\ndef _numpy_capsule_prediction(x, weights):\n    &quot;&quot;&quot; Generate the output for x and weights with numpy &quot;&quot;&quot;\n    batch_size, in_caps, in_dim = x.shape\n    _, out_caps, out_dim, _ = weights.shape\n\n    out_shape = (batch_size, in_caps, out_caps, out_dim)\n    out = np.zeros(out_shape)\n\n    for b in range(batch_size):\n        for i in range(in_caps):\n            for j in range(out_caps):\n                for c in range(out_dim):\n                    out[b, i, j, c] = np.dot(x[b, i], weights[i, j, c])\n    return out\n            </code></pre></div>\n<p>The file ops/capsuleprediction.py contains the capsule_prediction that actually loads the Op from the shared library file after being compiled. The function above should be straightforward to interpret: we loop over batch, in capsules, out capsules and out capsule elements and compute a dot product for each combination in the output. We’ll use this to verify the forward computation of the Op. Another thing to note is the tf.test.TestCase class which we inherit from. It provides some utility functions for testing with TensorFlow.</p>\n<p>Now let’s look at the test for the forward capsule prediction:</p>\n<p>@parameterized.expand([\n(batch<em>size, in</em>caps, out<em>caps, in</em>dim, out<em>dim) for\nbatch</em>size, in<em>caps, out</em>caps, in<em>dim, out</em>dim in\nitertools.product([4, 8], [4, 8], [4, 8], [4, 8], [4, 8])\n])\ndef test<em>capsule</em>prediction<em>op(self, batch</em>size, in<em>caps, out</em>caps, in<em>dim,\nout</em>dim):\n\"\"\" Tests the forward capsmatmul op \"\"\"\nx = np.random.rand(batch<em>size, in</em>caps, in<em>dim)\nweights = np.random.rand(in</em>caps, out<em>caps, out</em>dim, in_dim)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">truth = self._numpy_capsule_prediction(x, weights)\nwith self.test_session() as sess:\n    x_ph = tf.placeholder(tf.float32, x.shape)\n    w_ph = tf.placeholder(tf.float32, weights.shape)\n\n    ret = capsule_prediction(x_ph, w_ph)\n    out = sess.run(ret, {x_ph: x, w_ph: weights})\nself.assertAllClose(truth, out)\n            </code></pre></div>\n<p>I’ve used quite a few tricks in here. First, the parameterized decorator offers a way to invoke the test with different parameters where each test should succeed on its own and will be considered as a separate test by pytest. If it fails, the provided input will also be displayed in the test logs so in my experience, using it really speeds up the debugging if needed. The parameterized.expand decorator expects a list of tuples. Each tuple will be unpacked as positional function parameters. We can easily generate many tuples to vary the dimension sizes by using itertools.product which takes the Cartesian product of all of its arguments.</p>\n<p>The x and weights arrays are initialized randomly. The TensorFlow graph that we build is simple: it only holds two placeholders and the capsule<em>prediction Op. The returned value should be the same as that of the _numpy</em>capsule_prediction function. Let’s run the tests:</p>\n<p>Test output capsule prediction\nA nice feature of pytest is that you can add the -k flag to select a specific set of tests. Hooray, all tests passed!</p>\n<p>The backward capsule prediction\nNext up is the backward computation. You’ll notice that we have visited most of the coming concepts already. We already looked at methods to compute the correct indices for one-dimensional arrays by dimension sizes, we wrote a CUDA kernel, we registered our Op and we set up our tests. Therefore, I will speed things up a bit from here on. The only thing that is in our way is the exact definition of the gradient. It helps to consider a normal dense layer first:\nz\n=\nW\nx\n.\nGiven the gradients of a loss function\nL\nwith respect to\nz\n, we should be able to get the gradients of\nx\nand\nW\n:\nd\nL\nd\nx\ni\n=\nd\nL\nd\nz\nd\nz\nd\nx\ni\n=\n→\nw\ni\nz\n′\n,\nwhere\n→\nw\ni\nis the i-th row vector and\nz\n′\nis the vector holding the local gradients of the output. If this is the result for\ni\n, then the whole gradient for\nx\ncan be computed by:\nd\nL\nd\nx\n=\nW\n⊤\nz\n′\n.\nTo do the same for our capsule prediction operation we just have to replace\nz\n′\nwith\n^\nu\n′\nj\n|\ni\nand\nW\nwith\nW\ni\nj\n.</p>\n<p>What about the gradient of a specific weight? Well, this is perhaps even easier:\nd\nL\nd\nw\nr\nc\n=\nx\nr\nz\n′\nc\n.\nSo the matrix holding the gradients becomes an outer product:\nd\nL\nd\nW\n=\nx\n(\nz\n′\n)\n⊤\n.\nIntuitively, this tells us to just pick the two neurons that are connected between these two layers and multiply the local gradient of the output neuron with the input neuron. This means that we can do the same for the capsule prediction layer. The only difference is the dimensionality of the tensors involved.</p>\n<p>The gradient OpKernel\nI won’t bother you with the details anymore. Take it or leave it:</p>\n<p>class CapsulePredictionGradOp : public OpKernel\n{\npublic:\nexplicit CapsulePredictionGradOp(OpKernelConstruction* ctx) : OpKernel(ctx) { }</p>\n<p>  void Compute(OpKernelContext* ctx) override\n{\n// Get the input tensors\nconst Tensor&#x26; grad = ctx->input(0);\nconst Tensor&#x26; input = ctx->input(1);\nconst Tensor&#x26; weights = ctx->input(2);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Get the shapes so that we can allocate outputs\nconst TensorShape&amp; input_shape(input.shape());\nconst TensorShape&amp; weights_shape(weights.shape());\n\n// Allocate outputs\nTensor* grad_input = nullptr;\nTensor* grad_weights = nullptr;\nOP_REQUIRES_OK(ctx, ctx-&gt;allocate_output(0, input_shape, &amp;grad_input));\nOP_REQUIRES_OK(ctx, ctx-&gt;allocate_output(1, weights_shape, &amp;grad_weights));\n\n// Get the Eigen tensors and pass them on to the launch function\nauto input_tensor         = input.tensor&lt;float, 3&gt;();\nauto weights_tensor       = weights.tensor&lt;float, 4&gt;();\nauto grad_tensor          = grad.tensor&lt;float, 4&gt;();\nauto grad_input_tensor    = grad_input-&gt;tensor&lt;float, 3&gt;();\nauto grad_weights_tensor  = grad_weights-&gt;tensor&lt;float, 4&gt;();\nlaunchCapsulePredictionGrad(\n  ctx-&gt;eigen_device&lt;GPUDevice&gt;(), input_tensor, weights_tensor, grad_tensor,\n  grad_input_tensor, grad_weights_tensor\n);</code></pre></div>\n<p>  }\n};\n<br>\nNothing truly new here. An important difference is that we now have to allocate two output tensors: one for the weight gradient and one for the input gradient. The shape of a tensor’s gradient is identical to the shape of the tensor itself. Thus finding the shape for the allocated tensors is a piece of cake. Let’s check out the launchCapsulePredictionGrad function:</p>\n<p>void launchCapsulePredictionGrad(\nconst GPUDevice&#x26; d,\ntypename TTypes&#x3C;float, 3>::ConstTensor input,\ntypename TTypes&#x3C;float, 4>::ConstTensor weights,\ntypename TTypes&#x3C;float, 4>::ConstTensor grad,\ntypename TTypes&#x3C;float, 3>::Tensor grad<em>input,\ntypename TTypes&#x3C;float, 4>::Tensor grad</em>weights)\n{\nconst int64 batch<em>size  = input.dimension(0);\nconst int64 in</em>caps     = input.dimension(1);\nconst int64 in<em>dim      = input.dimension(2);\nconst int64 out</em>dim     = weights.dimension(2);\nconst int64 out_caps    = weights.dimension(1);</p>\n<p>  // Size first dim\nconst int64 w<em>d0 = out</em>caps * out<em>dim * in</em>dim;\nconst int64 x<em>d0 = in</em>caps * in<em>dim;\nconst int64 o</em>d0 = in<em>caps * out</em>caps * out_dim;</p>\n<p>  // Second dim\nconst int64 w<em>d1 = out</em>dim * in<em>dim;\nconst int64 x</em>d1 = in<em>dim;\nconst int64 o</em>d1 = out<em>caps * out</em>dim;</p>\n<p>  // Third dim\nconst int64 w<em>d2 = in</em>dim;\nconst int64 o<em>d2 = out</em>dim;</p>\n<p>  // Launch input gradient kernel\nCudaLaunchConfig config = GetCudaLaunchConfig(grad<em>input.size(), d);\ncapsulePredictionInputGradKernel\n&#x3C;&#x3C;&#x3C;config.block</em>count, config.thread<em>per</em>block, 0, d.stream()>>>(\ngrad.data(), weights.data(), grad<em>input.data(),\nw</em>d0, x<em>d0, x</em>d1, o<em>d0, o</em>d1, out<em>caps, out</em>dim, in<em>dim,\ngrad</em>input.size());</p>\n<p>  // Launch weight gradient kernel\nconfig = GetCudaLaunchConfig(grad<em>weights.size(), d);\ncapsulePredictionWeightsGradKernel\n&#x3C;&#x3C;&#x3C;config.block</em>count, config.thread<em>per</em>block, 0, d.stream()>>>(\ngrad.data(), input.data(), grad<em>weights.data(), batch</em>size,\ngrad<em>weights.size(), w</em>d0, w<em>d1, w</em>d2, x<em>d0, x</em>d1, o<em>d0, o</em>d1, o_d2);\n}\n<br>\nAgain, we see a similar code structure. We obtain the dimensions, we determine the memory sizes and finally, we launch not one, but two kernels.\nGlad you’re still there! Now it gets a bit more complicated. Behold the input gradient CUDA kernel:</p>\n<p><strong>global</strong> void capsulePredictionInputGradKernel(\nconst float* grad, const float* weights, float* grad<em>input,\nconst int64 w</em>d0,\nconst int64 x<em>d0, const int64 x</em>d1,\nconst int64 o<em>d0, const int64 o</em>d1,\nconst int64 out<em>caps,\nconst int64 out</em>dim,\nconst int64 in<em>dim,\nconst int64 output</em>size)\n{\nCUDA<em>1D</em>KERNEL<em>LOOP(i, output</em>size)\n{\n// So here we have in<em>grad[b,ci,e]\nconst int64 b     = i / x</em>d0;\nconst int64 ci    = (i % x<em>d0) / x</em>d1;\nconst int64 e<em>in  = i % x</em>d1;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Then, we can have a look at computing the array indices for in and W\nint64 w_idx       = ci * w_d0 + e_in;\nint64 grad_idx    = b * o_d0 + ci * o_d1;\n\n// Initialize result\nfloat result      = 0.0;\n// Iterate over cj and e_out, we already have the other indices\nfor (int cj = 0; cj &lt; out_caps; ++cj)\n{\n  for (int e_out = 0; e_out &lt; out_dim; ++e_out)\n  {\n    // Next element of grad can be found by incrementing grad_idx\n    result  += ldg(grad + grad_idx++) * ldg(weights + w_idx);\n    // Next element of weights can be found by going to the next output\n    // capsule element, meaning that we add in_dim to w_idx\n    w_idx   += in_dim;\n  }\n}\n// Write the result\ngrad_input[i] = result;</code></pre></div>\n<p>  }\n}\n<br>\nI have added quite some comments to the code to make it more readable. Similar to our previous CUDA kernel, this one determines the axis indices that matter: b, ci and e_in. These are then used to compute the one-dimensional indices for w and grad (the output gradient). A single input neuron is not just used for one matrix-vector product, but it is involved for all prediction matrices\nW\ni\nj\n,\nj\n∈\n{\n1\n,\n…\n,</p>\n<h1></h1>\n<p>output capsules\n}\n. Therefore, we require two loops, one dealing with the output capsules and another one that deals with the individual capsule elements. Rather than just incrementing the index for our weights, we must now skip to the next output capsule in the inner loop. This means that we should add in_dim to the index on each iteration.</p>\n<p>The weight gradient CUDA kernel implementation is:</p>\n<p><strong>global</strong> void capsulePredictionWeightsGradKernel(\nconst float* grad, const float* input, float* grad<em>weights,\nconst int64 batch</em>size, const int64 output<em>size,\nconst int64 w</em>d0, const int64 w<em>d1, const int64 w</em>d2,\nconst int64 x<em>d0, const int64 x</em>d1,\nconst int64 o<em>d0, const int64 o</em>d1, const int64 o<em>d2\n)\n{\nCUDA</em>1D<em>KERNEL</em>LOOP(i, output<em>size)\n{\n// So here we have w[ci,cj,e</em>out,e<em>in]\nconst int64 ci    = i / w</em>d0;\nconst int64 cj    = (i % w<em>d0) / w</em>d1;\nconst int64 e<em>out = (i % w</em>d1) / w<em>d2;\nconst int64 e</em>in  = i % w_d2;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Then, we can have a look at computing the array indices for\n// in and grad\nint64 input_idx   = ci * x_d1 + e_in;               // (b == 0)\nint64 grad_idx    = ci * o_d1 + cj * o_d2 + e_out;  // (b == 0)\n\n// Initilize result\nfloat result      = 0.0;\n// We only iterate over b, since we have the other indices already\nfor (int64 b = 0; b &lt; batch_size; b++)\n{\n  result += ldg(grad + grad_idx) * ldg(input + input_idx);\n  // Next elements can be found by jumping to the next batch\n  input_idx += x_d0;\n  grad_idx  += o_d0;\n}\ngrad_weights[i] = result;</code></pre></div>\n<p>  }\n}\n<br>\nThe same tricks apply here again: we compute the tensor axis indices, we compute the one-dimensional indices and we loop over the required elements to obtain our output. What I didn’t mention before is that we have to sum the gradients for each weight over all samples in the batch. Given the memory size for the input and output tensors along the 0-th axis, this is a straightforward thing to do.</p>\n<p>Before our gradient implementation nicely integrates with TensorFlow, we have to register it as being the gradient of our CapsulePrediction Op:</p>\n<p>@ops.RegisterGradient(“CapsulePrediction”)\ndef <em>capsule</em>prediction<em>grad(op, grad):\n\"\"\" Computes gradient for capsule prediction operation \"\"\"\nreturn op</em>module.capsule<em>prediction</em>grad(grad, op.inputs[0], op.inputs[1])\n<br>\nNow we can just use tf.gradients after which the computation graph for the gradient should include our gradient op. Awesome!</p>\n<p>Testing the gradients\nWe have arrived at one of the last stages: testing the gradient. This really sounds harder than it is. TensorFlow already has a gradient testing utility, and we’ll use it here. We add the following methods to our CapsulePredictionOpTest class:</p>\n<p>@parameterized.expand([\n(batch<em>size, in</em>caps, out<em>caps, in</em>dim, out<em>dim) for\nbatch</em>size, in<em>caps, out</em>caps, in<em>dim, out</em>dim in\nitertools.product([4, 8], [4, 8], [4, 8], [4, 8], [4, 8])\n])\ndef test<em>capsule</em>prediction<em>weights</em>grad(self, batch<em>size, in</em>caps, out<em>caps,\nin</em>dim, out<em>dim):\n\"\"\" Tests gradient of output w.r.t. weights \"\"\"\nx = np.random.rand(batch</em>size, in<em>caps, in</em>dim)\nweights = np.random.rand(in<em>caps, out</em>caps, out<em>dim, in</em>dim)\nout<em>shape = (batch</em>size, in<em>caps, out</em>caps, out_dim)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">with self.test_session():\n    x_ph = tf.placeholder(tf.float32, x.shape)\n    w_ph = tf.placeholder(tf.float32, weights.shape)\n    fd = {x_ph: x, w_ph: weights}\n\n    caps_out = capsule_prediction(x_ph, w_ph)\n    grad_w = tf.test.compute_gradient(\n        w_ph, weights.shape, caps_out, out_shape, extra_feed_dict=fd\n    )\n\nself.assertAllClose(grad_w[0], grad_w[1], atol=1e-3, rtol=1e-3)</code></pre></div>\n<p>@parameterized.expand([\n(batch<em>size, in</em>caps, out<em>caps, in</em>dim, out<em>dim) for\nbatch</em>size, in<em>caps, out</em>caps, in<em>dim, out</em>dim in\nitertools.product([4, 8], [4, 8], [4, 8], [4, 8], [4, 8])\n])\ndef test<em>capsule</em>prediction<em>input</em>grad(self, batch<em>size, in</em>caps, out<em>caps,\nin</em>dim, out<em>dim):\n\"\"\" Tests gradient of output w.r.t. x \"\"\"\nx = np.random.rand(batch</em>size, in<em>caps, in</em>dim)\nweights = np.random.rand(in<em>caps, out</em>caps, out<em>dim, in</em>dim)\nout<em>shape = (batch</em>size, in<em>caps, out</em>caps, out_dim)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">with self.test_session():\n    x_ph = tf.placeholder(tf.float32, x.shape)\n    w_ph = tf.placeholder(tf.float32, weights.shape)\n    fd = {x_ph: x, w_ph: weights}\n    caps_out = capsule_prediction(x_ph, w_ph)\n    grad_x = tf.test.compute_gradient(\n        x_ph, x.shape, caps_out, out_shape, extra_feed_dict=fd\n    )\n\nself.assertAllClose(grad_x[0], grad_x[1], atol=1e-3, rtol=1e-3)\n            </code></pre></div>\n<p>The tf.test.compute_gradient function determines the ‘theoretical’ and numerical gradient respectively. The numerical gradient is computed by finite differences whereas the theoretical gradient is computed by our Op’s registered gradient. They should be nearly equal, so we assert they are close by using the assertAllClose method that is inherited from tf.test.TestCase. Here is the resulting output:</p>\n<p>Test output capsule prediction\nWhoa! It’s alive!</p>\n<p>Running it on MNIST classification\nIn my previous blog post, I have already discussed a capsule network for MNIST classification. We can now insert our capsule_prediction function in the code:</p>\n<p>def digit<em>caps(incoming, n</em>digit<em>caps, dim</em>digit<em>caps, name=“DigitCaps”,\nneuron</em>axis=-1, capsule<em>axis=-2, routing</em>iters=3):\n\"\"\" Digit capsule layer \"\"\"\nwith tf.variable<em>scope(name):\n# Get number of capsules and dimensionality of previous layer\nin</em>shape = incoming.shape.as<em>list()\nn</em>primary<em>caps = in</em>shape[capsule_axis]\ndim<em>primary</em>caps = in<em>shape[neuron</em>axis]\n# Initialize all weight matrices\nw<em>shape = [n</em>primary<em>caps, n</em>digit<em>caps, dim</em>digit<em>caps, dim</em>primary<em>caps]<br>\nif args.custom</em>op <br>\nelse [n<em>primary</em>caps, n<em>digit</em>caps * dim<em>digit</em>caps, dim<em>primary</em>caps]</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    W_ij = tf.get_variable(\n        &quot;weights&quot;, shape=w_shape,\n        initializer=tf.keras.initializers.glorot_uniform()\n    )\n    # Initialize routing logits, the leading axis with size 1 is added for\n    # convenience.\n    b_ij = tf.get_variable(\n        &quot;logits&quot;, shape=[1, n_primary_caps, n_digit_caps],\n        initializer=tf.zeros_initializer(), trainable=args.logits_trainable\n    )\n    if args.custom_op:\n        # Custom op\n        u_hat = capsule_prediction(incoming, W_ij)\n    else:\n        # Reshape and transpose hacking\n        u_i = tf.transpose(incoming, (1, 2, 0))\n        u_hat = tf.matmul(W_ij, u_i)\n        u_hat = tf.reshape(\n            tf.transpose(u_hat, (2, 0, 1)),\n            (-1, n_primary_caps, n_digit_caps, dim_digit_caps)\n        )\n\n    def capsule_out(b_ij):\n        &quot;&quot;&quot; Given the logits b_ij, computes the output of this layer. &quot;&quot;&quot;\n        c_ij = tf.nn.softmax(b_ij, axis=2)\n        s_j = tf.reduce_sum(\n            tf.reshape(c_ij, (-1, n_primary_caps, n_digit_caps, 1)) * u_hat,\n            axis=1\n        )\n        v_j = squash(s_j)\n        return v_j\n\n    def routing_iteration(iter, logits):\n        &quot;&quot;&quot;\n        Given a set of logits, computes the new logits using the routing\n        definition from the paper.\n        &quot;&quot;&quot;\n        v_j = capsule_out(logits)\n        a_ij = tf.reduce_sum(tf.expand_dims(v_j, axis=1) * u_hat, axis=3)\n        logits = tf.reshape(logits + a_ij, (-1, n_primary_caps, n_digit_caps))\n        return [iter + 1, logits]\n\n    # Compute routing\n    i = tf.constant(0)\n    routing_result = tf.while_loop(\n        lambda i, logits: tf.less(i, routing_iters),\n        routing_iteration,\n        [i, tf.tile(b_ij, tf.stack([tf.shape(incoming)[0], 1, 1]))]\n    )\n    # Second element of the result contains our final logits\n    v_j = capsule_out(routing_result[1])\n\nreturn v_j\n            </code></pre></div>\n<p>So what about performance? Well, it turns out that training with the custom op runs somewhat slower than training with the transpose and reshape hacking. As I’ve stated before, the code could be optimized even more. Perhaps this will be on a next blog post. Anyway, thanks for staying around till the end and I would love to hear suggestions and feedback!</p>","frontmatter":{"title":"Cuda, TensorFlow and capsule networks","date":"February 11, 2018","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/capsnet/","previous":null,"next":{"fields":{"slug":"/spn01/"},"frontmatter":{"title":"Tensorizing Sum-Product Networks"}}}}